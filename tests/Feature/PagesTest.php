<?php

namespace Tests\Feature;

use Corals\Modules\CMS\Models\Page;
use Corals\User\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class PagesTest extends TestCase
{
    use DatabaseTransactions;

    protected $page;
    protected $pageRequest;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = User::query()->whereHas('roles', function ($query) {
            $query->where('name', 'superuser');
        })->first();
        Auth::loginUsingId($user->id);
    }

    public function test_pages_store()
    {
        $pages = ['page1', 'page2', 'page3', 'page4'];
        $page = array_rand($pages);

        $this->pageRequest = [
            'title' => $pages[$page],
            'slug' => $pages[$page],
            'published' => random_int(0, 1),
            'internal' => random_int(0, 1),
            'private' => random_int(0, 1),
            'author_id' => \user()->id,];

        $response = $this->post('cms/pages', $this->pageRequest);

        $this->page = Page::query()->where([
            ['title', $this->pageRequest['title']],
            ['slug', $this->pageRequest['slug']],
            ['published', $this->pageRequest['published']],
            ['internal', $this->pageRequest['internal']],
            ['private', $this->pageRequest['private']],
            ['author_id', $this->pageRequest['author_id']],
        ])->first();

        $response->assertDontSee('The given data was invalid')
            ->assertRedirect('cms/pages');

        $this->assertDatabaseHas('posts', [
            'title' => $this->page->title,
            'slug' => $this->page->slug,
            'published' => $this->page->published,
            'internal' => $this->page->internal,
            'private' => $this->page->private,
            'author_id' => $this->page->author_id,
        ]);
    }

    public function test_pages_edit()
    {
        $this->test_pages_store();
        if ($this->page) {
            $response = $this->get('cms/pages/' . $this->page->hashed_id . '/edit');

            $response->assertViewIs('cms::pages.create_edit')->assertStatus(200);
        }
        $this->assertTrue(true);
    }

    public function test_pages_update()
    {
        $this->test_pages_store();

        if ($this->page) {
            $published = $this->page->published == 0 ? 1 : 0;
            $response = $this->put('cms/pages/' . $this->page->hashed_id, [
                'title' => $this->page->title,
                'slug' => $this->page->slug,
                'published' => $published,
                'internal' => $this->page->internal,
                'private' => $this->page->private,
                'author_id' => $this->page->author_id,
            ]);

            $response->assertRedirect('cms/pages');
            $this->assertDatabaseHas('posts', [
                'title' => $this->page->title,
                'slug' => $this->page->slug,
                'published' => $published,
                'internal' => $this->page->internal,
                'private' => $this->page->private,
                'author_id' => $this->page->author_id,
            ]);
        }

        $this->assertTrue(true);
    }

    public function test_pages_delete()
    {
        $this->test_pages_store();

        if ($this->page) {
            $response = $this->delete('cms/pages/' . $this->page->hashed_id);

            $response->assertStatus(200)->assertSeeText('Page has been deleted successfully.');

            $this->isSoftDeletableModel(Page::class);
            $this->assertDatabaseMissing('posts', [
                'title' => $this->page->title,
                'slug' => $this->page->slug,
                'published' => $this->page->published,
                'internal' => $this->page->internal,
                'private' => $this->page->private,
                'author_id' => $this->page->author_id,]);
        }
        $this->assertTrue(true);
    }

    public function test_pages_design()
    {
        $this->test_pages_store();

        if ($this->page) {
            $response = $this->get('cms/pages/' . $this->page->hashed_id . '/design');

            $response->assertViewIs('cms::designer.designer')->assertStatus(200);
        }
        $this->assertTrue(true);
    }

    public function test_pages_save_design()
    {
        $this->test_pages_store();

        if ($this->page) {
            $this->page->content = '<section class="gray-bg text-center"><div class="container">
                <div class="row"><div class="col-md-12"><h4 class="section-subtitle">Popular Questions</h4>
                <p>Explore some of the best tips from around the city from our partners and friends.</p></div></div></div></section>
                <style type="css/text">* { box-sizing: border-box; } body {margin: 0;}</style><script type="text/javascript"></script>';

            $response = $this->put('cms/pages/' . $this->page->hashed_id . '/save-design', [
                'title' => $this->page->title,
                'slug' => $this->page->slug,
                'content' => $this->page->content,
            ]);

            $response->assertStatus(200)->assertSeeText('Page has been updated successfully.');
            $this->assertDatabaseHas('posts', [
                'title' => $this->page->title,
                'slug' => $this->page->slug,
                'published' => $this->page->published,
                'internal' => $this->page->internal,
                'private' => $this->page->private,
                'author_id' => $this->page->author_id,
                'content' => $this->page->content,
            ]);
        }
        $this->assertTrue(true);
    }
}
