<?php

namespace Tests\Feature;

use Corals\Modules\CMS\Models\Category;
use Corals\Modules\CMS\Models\Faq;
use Corals\User\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class FaqsTest extends TestCase
{
    use DatabaseTransactions;

    protected $faqRequest;
    protected $faq;
    protected $category;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = User::query()->whereHas('roles', function ($query) {
            $query->where('name', 'superuser');
        })->first();
        Auth::loginUsingId($user->id);
    }

    public function test_faqs_store()
    {
        $faqs = ['faq1', 'faq2', 'faq3', 'faq4'];
        $faq = array_rand($faqs);

        $this->category = Category::query()->create([
            'name' => 'category',
            'slug' => 'category',
            'belongs_to' => 'faq',
        ]);
        $this->assertDatabaseHas('categories', [
            'name' => $this->category->name,
            'slug' => $this->category->slug,
            'belongs_to' => $this->category->belongs_to,
        ]);

        $this->faqRequest = [
            'title' => $faqs[$faq],
            'content' => '<p>faq</p>',
            'published' => random_int(0, 1),
            'categories' => [$this->category->id],
        ];

        $response = $this->post('cms/faqs', $this->faqRequest);

        $this->faq = Faq::query()->where([
            ['title', $this->faqRequest['title']],
            ['content', $this->faqRequest['content']],
            ['published', $this->faqRequest['published']],
        ])->first();

        $response->assertDontSee('The given data was invalid')
            ->assertRedirect('cms/faqs');

        $this->assertDatabaseHas('posts', [
            'title' => $this->faq->title,
            'content' => $this->faq->content,
            'published' => $this->faq->published,
        ]);
    }

    public function test_faqs_edit()
    {
        $this->test_faqs_store();
        if ($this->faq) {
            $response = $this->get('cms/faqs/' . $this->faq->hashed_id . '/edit');

            $response->assertViewIs('cms::faqs.create_edit')->assertStatus(200);
        }
        $this->assertTrue(true);
    }

    public function test_faqs_update()
    {
        $this->test_faqs_store();

        if ($this->faq) {
            $published = $this->faq->published == 0 ? 1 : 0;
            $response = $this->put('cms/faqs/' . $this->faq->hashed_id, [
                'title' => $this->faq->title,
                'content' => $this->faq->content,
                'published' => $published,
                'categories' => [$this->category->id],
            ]);

            $response->assertRedirect('cms/faqs');
            $this->assertDatabaseHas('posts', [
                'title' => $this->faq->title,
                'content' => $this->faq->content,
                'published' => $published,
            ]);
        }

        $this->assertTrue(true);
    }

    public function test_faqs_delete()
    {
        $this->test_faqs_store();

        if ($this->faq) {
            $response = $this->delete('cms/faqs/' . $this->faq->hashed_id);

            $response->assertStatus(200)->assertSeeText($this->faq->title.' has been deleted successfully.');

            $this->isSoftDeletableModel(Faq::class);
            $this->assertDatabaseMissing('posts', [
                'title' => $this->faq->title,
                'content' => $this->faq->content,
                'published' => $this->faq->published,
                ]);
        }
        $this->assertTrue(true);
    }
}
