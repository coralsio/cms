<?php

namespace Tests\Feature;

use Corals\Modules\CMS\Models\Block;
use Corals\Modules\CMS\Models\Widget;
use Corals\User\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class BlocksTest extends TestCase
{
    use DatabaseTransactions;

    protected $block;
    protected $widget;
    protected $widgetRequest;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = User::query()->whereHas('roles', function ($query) {
            $query->where('name', 'superuser');
        })->first();
        Auth::loginUsingId($user->id);
    }

    public function test_blocks_store()
    {
        $blocks = ['block1', 'block2', 'block3'];
        $block = array_rand($blocks);

        $this->block = Block::query()->create([
            'name' => $blocks[$block],
            'key' => $blocks[$block],
            'status' => 'active',
        ]);

        $this->assertDatabaseHas('cms_blocks', [
            'name' => $this->block->name,
            'key' => $this->block->key,
            'status' => $this->block->status,
        ]);

    }

    public function test_blocks_widgets_view()
    {
        $this->test_blocks_store();
        if ($this->block) {
            $response = $this->get('cms/blocks/' . $this->block->hashed_id . '/widgets');

            $response->assertViewIs('cms::widgets.index')->assertStatus(200);
        }
        $this->assertTrue(true);
    }

    public function test_blocks_widgets_store()
    {
        $this->test_blocks_store();

        if ($this->block) {
            $widgets = ['widget1', 'widget2', 'widget3'];
            $widget = array_rand($widgets);

            $this->widgetRequest = [
                'title' => $widgets[$widget],
                'widget_width' => random_int(1, 5),
                'content' => '<p>widgets</p>',
                'status' => 'active',
                'block_id' => $this->block->id,
            ];

            $response = $this->post('cms/blocks/' . $this->block->hashed_id . '/widgets', $this->widgetRequest);

            $this->widget = Widget::query()->where([
                ['title', $this->widgetRequest['title']],
                ['content', $this->widgetRequest['content']],
                ['block_id', $this->widgetRequest['block_id']],
            ])->first();

            $response->assertDontSee('The given data was invalid')
                ->assertRedirect('cms/blocks/' . $this->block->hashed_id . '/widgets');


            $this->assertDatabaseHas('cms_widgets', [
                'title' => $this->widget->title,
                'widget_order' => $this->widget->widget_order,
                'widget_width' => $this->widget->widget_width,
                'content' => $this->widget->content,
                'status' => $this->widget->status,
                'block_id' => $this->widget->block_id
            ]);

        }

        $this->assertTrue(true);
    }

    public function test_blocks_widgets_edit()
    {
        $this->test_blocks_widgets_store();

        if ($this->widget) {
            $response = $this->get('cms/blocks/' . $this->block->hashed_id . '/widgets/' . $this->widget->hashed_id . '/edit');
            $response->assertViewIs('cms::widgets.create_edit')->assertStatus(200);
        }
        $this->assertTrue(true);
    }

    public function test_blocks_widgets_update()
    {
        $this->test_blocks_widgets_store();

        if ($this->widget) {
            $widget_width = random_int(1, 6);
            
            $response = $this->put('cms/blocks/' . $this->block->hashed_id . '/widgets/' . $this->widget->hashed_id, [
                'title' => $this->widget->title,
                'widget_width' => $widget_width,
                'content' => $this->widget->content,
                'status' => $this->widget->status,
            ]);

            $response->assertRedirect('cms/blocks/' . $this->block->hashed_id . '/widgets');
            $this->assertDatabaseHas('cms_widgets', [
                'title' => $this->widget->title,
                'widget_width' => $widget_width,
                'content' => $this->widget->content,
                'status' => $this->widget->status,
                'block_id' => $this->widget->block_id
            ]);
        }
        $this->assertTrue(true);
    }

    public function test_blocks_widgets_delete()
    {
        $this->test_blocks_widgets_store();

        if ($this->widget) {
            $response = $this->delete('cms/blocks/' . $this->block->hashed_id . '/widgets/' . $this->widget->hashed_id);

            $response->assertStatus(200)->assertSeeText('Widget has been deleted successfully.');

            $this->isSoftDeletableModel(Widget::class);
            $this->assertDatabaseMissing('cms_widgets', [
                'title' => $this->widget->title,
                'widget_order' => $this->widget->widget_order,
                'widget_width' => $this->widget->widget_width,
                'status' => $this->widget->status,
                'block_id' => $this->widget->block_id
            ]);
        }
        $this->assertTrue(true);
    }
}
