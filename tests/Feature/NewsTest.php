<?php

namespace Tests\Feature;

use Corals\Modules\CMS\Models\News;
use Corals\User\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class NewsTest extends TestCase
{
    use DatabaseTransactions;

    protected $newRequest;
    protected $new;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = User::query()->whereHas('roles', function ($query) {
            $query->where('name', 'superuser');
        })->first();
        Auth::loginUsingId($user->id);
    }

    public function test_news_store()
    {
        $news = ['new1', 'new2', 'new3', 'new4'];
        $new = array_rand($news);

        $this->newRequest = [
            'title' => $news[$new],
            'slug' => $news[$new],
            'content' => '<p>new</p>',
            'published' => random_int(0, 1),
            'internal' => random_int(0, 1),
            'private' => random_int(0, 1),
        ];

        $response = $this->post('cms/news', $this->newRequest);

        $this->new = News::query()->where([
            ['title', $this->newRequest['title']],
            ['slug', $this->newRequest['slug']],
            ['content', $this->newRequest['content']],
            ['published', $this->newRequest['published']],
            ['internal', $this->newRequest['internal']],
            ['private', $this->newRequest['private']],
        ])->first();

        $response->assertDontSee('The given data was invalid')
            ->assertRedirect('cms/news');

        $this->assertDatabaseHas('posts', [
            'title' => $this->new->title,
            'slug' => $this->new->slug,
            'content' => $this->new->content,
            'published' => $this->new->published,
            'internal' => $this->new->internal,
            'private' => $this->new->private,
            'type' => $this->new->type,
        ]);
    }

    public function test_news_edit()
    {
        $this->test_news_store();
        if ($this->new) {
            $response = $this->get('cms/news/' . $this->new->hashed_id . '/edit');

            $response->assertViewIs('cms::news.create_edit')->assertStatus(200);
        }
        $this->assertTrue(true);
    }

    public function test_news_update()
    {
        $this->test_news_store();

        if ($this->new) {
            $published = $this->new->published == 0 ? 1 : 0;
            $response = $this->put('cms/news/' . $this->new->hashed_id, [
                'title' => $this->new->title,
                'slug' => $this->new->slug,
                'content' => $this->new->content,
                'published' => $published,
                'internal' => $this->new->internal,
                'private' => $this->new->private,
                'type' => $this->new->type,
            ]);

            $response->assertRedirect('cms/news');
            $this->assertDatabaseHas('posts', [
                'title' => $this->new->title,
                'slug' => $this->new->slug,
                'content' => $this->new->content,
                'published' => $published,
                'internal' => $this->new->internal,
                'private' => $this->new->private,
                'type' => $this->new->type,
            ]);
        }

        $this->assertTrue(true);
    }

    public function test_news_delete()
    {
        $this->test_news_store();

        if ($this->new) {
            $response = $this->delete('cms/news/' . $this->new->hashed_id);

            $response->assertStatus(200)->assertSeeText('News has been deleted successfully.');

            $this->isSoftDeletableModel(News::class);
            $this->assertDatabaseMissing('posts', [
                'title' => $this->new->title,
                'slug' => $this->new->slug,
                'content' => $this->new->content,
                'published' => $this->new->published,
                'internal' => $this->new->internal,
                'private' => $this->new->private,
                'type' => $this->new->type,
                ]);
        }
        $this->assertTrue(true);
    }
}
