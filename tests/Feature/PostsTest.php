<?php

namespace Tests\Feature;

use Corals\Modules\CMS\Models\Category;
use Corals\Modules\CMS\Models\Post;
use Corals\User\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class PostsTest extends TestCase
{
    use DatabaseTransactions;

    protected $post;
    protected $postRequest;
    protected $category;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = User::query()->whereHas('roles', function ($query) {
            $query->where('name', 'superuser');
        })->first();
        Auth::loginUsingId($user->id);
    }

    public function test_posts_store()
    {
        $posts = ['post1', 'post2', 'post3', 'post4'];
        $post = array_rand($posts);

        $this->category = Category::query()->create([
            'name'=>'category',
            'slug'=>'category',
            'belongs_to'=>'post',
            ]);
        $this->assertDatabaseHas('categories', [
            'name'=>$this->category->name,
            'slug'=>$this->category->slug,
            'belongs_to'=>$this->category->belongs_to,
        ]);

        $this->postRequest = [
            'title' => $posts[$post],
            'slug' => $posts[$post],
            'content'=>'<p>post</p>',
            'published' => random_int(0, 1),
            'internal' => random_int(0, 1),
            'private' => random_int(0, 1),
            'author_id' => \user()->id,
            'categories' => [$this->category->id]
            ];

        $response = $this->post('cms/posts', $this->postRequest);

        $this->post = Post::query()->where([
            ['title', $this->postRequest['title']],
            ['slug', $this->postRequest['slug']],
            ['content', $this->postRequest['content']],
            ['published', $this->postRequest['published']],
            ['internal', $this->postRequest['internal']],
            ['private', $this->postRequest['private']],
            ['author_id', $this->postRequest['author_id']],
        ])->first();

        $response->assertDontSee('The given data was invalid')
            ->assertRedirect('cms/posts');

        $this->assertDatabaseHas('posts', [
            'title' => $this->post->title,
            'slug' => $this->post->slug,
            'content' =>$this->post->content,
            'published' => $this->post->published,
            'internal' => $this->post->internal,
            'private' => $this->post->private,
            'author_id' => $this->post->author_id,
        ]);

        $this->assertDatabaseHas('category_post', [
            'post_id'=>$this->post->id,
            'category_id'=>$this->category->id,
        ]);
    }

    public function test_posts_edit()
    {
        $this->test_posts_store();
        if ($this->post) {
            $response = $this->get('cms/posts/' . $this->post->hashed_id . '/edit');

            $response->assertViewIs('cms::posts.create_edit')->assertStatus(200);
        }
        $this->assertTrue(true);
    }

    public function test_posts_update()
    {
        $this->test_posts_store();

        if ($this->post) {
            $published = $this->post->published == 0 ? 1 : 0;
            $response = $this->put('cms/posts/' . $this->post->hashed_id, [
                'title' => $this->post->title,
                'slug' => $this->post->slug,
                'content' =>$this->post->content,
                'published' => $published,
                'internal' => $this->post->internal,
                'private' => $this->post->private,
                'author_id' => $this->post->author_id,
                'categories' => [$this->category->id]
            ]);

            $response->assertRedirect('cms/posts');
            $this->assertDatabaseHas('posts', [
                'title' => $this->post->title,
                'slug' => $this->post->slug,
                'content' =>$this->post->content,
                'published' => $published,
                'internal' => $this->post->internal,
                'private' => $this->post->private,
                'author_id' => $this->post->author_id,
            ]);
        }

        $this->assertTrue(true);
    }

    public function test_posts_delete()
    {
        $this->test_posts_store();

        if ($this->post) {
            $response = $this->delete('cms/posts/' . $this->post->hashed_id);

            $response->assertStatus(200)->assertSeeText('Post has been deleted successfully.');

            $this->isSoftDeletableModel(Post::class);
            $this->assertDatabaseMissing('posts', [
                'title' => $this->post->title,
                'slug' => $this->post->slug,
                'content' =>$this->post->content,
                'published' => $this->post->published,
                'internal' => $this->post->internal,
                'private' => $this->post->private,
                'author_id' => $this->post->author_id,]);

            $this->assertDatabaseMissing('category_post', [
                'post_id'=>$this->post->id,
                'category_id'=>$this->category->id,
            ]);
        }
        $this->assertTrue(true);
    }
}
