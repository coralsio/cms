<?php

namespace Tests\Feature;

use Corals\Modules\CMS\Models\Testimonial;
use Corals\User\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class TestimonialsTest extends TestCase
{
    use DatabaseTransactions;

    protected $testimonialRequest;
    protected $testimonial;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = User::query()->whereHas('roles', function ($query) {
            $query->where('name', 'superuser');
        })->first();
        Auth::loginUsingId($user->id);
    }

    public function test_testimonials_store()
    {
        $testimonials = ['testimonial1', 'testimonial2', 'testimonial3', 'testimonial4'];
        $testimonial = array_rand($testimonials);

        $this->testimonialRequest = [
            'title' => $testimonials[$testimonial],
            'content' => '<p>testimonial</p>',
            'published' => random_int(0, 1),
            'properties' => [
                'job_title' => 'Dr',
                'rating' => random_int(1, 5),
            ],
        ];

        $response = $this->post('cms/testimonials', $this->testimonialRequest);

        $this->testimonial = Testimonial::query()->where([
            ['title', $this->testimonialRequest['title']],
            ['content', $this->testimonialRequest['content']],
            ['published', $this->testimonialRequest['published']],
        ])->first();

        $response->assertDontSee('The given data was invalid')
            ->assertRedirect('cms/testimonials');

        $this->assertDatabaseHas('posts', [
            'title' => $this->testimonial->title,
            'content' => $this->testimonial->content,
            'published' => $this->testimonial->published,
        ]);
    }

    public function test_testimonials_edit()
    {
        $this->test_testimonials_store();
        if ($this->testimonial) {
            $response = $this->get('cms/testimonials/' . $this->testimonial->hashed_id . '/edit');

            $response->assertViewIs('cms::testimonials.create_edit')->assertStatus(200);
        }
        $this->assertTrue(true);
    }

    public function test_testimonials_update()
    {
        $this->test_testimonials_store();

        if ($this->testimonial) {
            $published = $this->testimonial->published == 0 ? 1 : 0;
            $rating = random_int(1, 5);
            $response = $this->put('cms/testimonials/' . $this->testimonial->hashed_id, [
                'title' => $this->testimonial->title,
                'content' => $this->testimonial->content,
                'published' => $published,
                'properties' => [
                    'job_title' => 'manager',
                    'rating' => $rating,
                ],
            ]);

            $response->assertRedirect('cms/testimonials');
            $this->assertDatabaseHas('posts', [
                'title' => $this->testimonial->title,
                'content' => $this->testimonial->content,
                'published' => $published,
            ]);
        }

        $this->assertTrue(true);
    }

    public function test_testimonials_delete()
    {
        $this->test_testimonials_store();

        if ($this->testimonial) {
            $response = $this->delete('cms/testimonials/' . $this->testimonial->hashed_id);

            $response->assertStatus(200)->assertSeeText($this->testimonial->title . ' has been deleted successfully.');

            $this->isSoftDeletableModel(Testimonial::class);
            $this->assertDatabaseMissing('posts', [
                'title' => $this->testimonial->title,
                'content' => $this->testimonial->content,
                'published' => $this->testimonial->published,
            ]);
        }
        $this->assertTrue(true);
    }
}
